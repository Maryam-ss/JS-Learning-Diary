//lets revise OOP
//instance --actual objecct creating from the class
class Student{
    constructor(name){
        this.name=name;

    }
}

let student1 = new Student ("Maryam")
let Student2 = new Student ("ali")

console.log(student1.name);

//2nd is Encapsulation(protect data)

class User {
    #Password ="secret" //#is used for private class field
    constructor(name,age){
        this.name= name;
        this.age = age;

    }    
    printinfo(){
        console.log(`Name is ${this.name} and age is ${this.age}`);

        
    }
    get Password(){//getter accessor
        return this.#Password;
    }
    set Password(newPassword){ //setter accesstor with validation
        if(newPassword.length>=6){
             this.#Password=newPassword;
    } else{
        console.log( "Password must be at least 6 characters long.");
        
    
    }

        }

    }       
    const u1 = new User ("eshaal ",20)
    u1.printinfo();
    u1.Password="newPassword"; //using setter
    console.log(u1.Password); //using getter
    console.log(u1 instanceof User);
    console.log(u1 instanceof Object);
    

    //another example of encapsulation
    class Cars{
        #engineNumber ="private";
        constructor(name,color){
            this.name =name ;
            this.color = color;

        }
     printinfo(){
        console.log(`car name is ${this.name}and car color is ${this.color}`);
        
    }
    get engineNumber(){ // geter
        return this.#engineNumber;
    }
    set engineNumber(myEngineNumber){
        if (myEngineNumber.length==8){
                   this.#engineNumber = myEngineNumber;

        }
        else{
            console.log("check your digits its must be exactly 8 digits");
            
        }
    }
    }

    const car1 = new Cars("BMW","yellow");
    car1.printinfo();
    car1.engineNumber="34560544";
    console.log(car1.engineNumber);
    
    console.log(car1 instanceof Cars);
    console.log(car1 instanceof Object);
    
    

           
   







































































































































































































































































































































































































































































































































































































































































































































